// Code generated by mockery v2.23.2. DO NOT EDIT.

package internal

import (
	http "net/http"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockIHttpClient is an autogenerated mock type for the IHttpClient type
type MockIHttpClient struct {
	mock.Mock
}

type MockIHttpClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHttpClient) EXPECT() *MockIHttpClient_Expecter {
	return &MockIHttpClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: req
func (_m *MockIHttpClient) Do(req *http.Request) (*http.Response, error) {
	ret := _m.Called(req)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*http.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIHttpClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockIHttpClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - req *http.Request
func (_e *MockIHttpClient_Expecter) Do(req interface{}) *MockIHttpClient_Do_Call {
	return &MockIHttpClient_Do_Call{Call: _e.mock.On("Do", req)}
}

func (_c *MockIHttpClient_Do_Call) Run(run func(req *http.Request)) *MockIHttpClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockIHttpClient_Do_Call) Return(_a0 *http.Response, _a1 error) *MockIHttpClient_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIHttpClient_Do_Call) RunAndReturn(run func(*http.Request) (*http.Response, error)) *MockIHttpClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// SetNoTLSVerify provides a mock function with given fields:
func (_m *MockIHttpClient) SetNoTLSVerify() {
	_m.Called()
}

// MockIHttpClient_SetNoTLSVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNoTLSVerify'
type MockIHttpClient_SetNoTLSVerify_Call struct {
	*mock.Call
}

// SetNoTLSVerify is a helper method to define mock.On call
func (_e *MockIHttpClient_Expecter) SetNoTLSVerify() *MockIHttpClient_SetNoTLSVerify_Call {
	return &MockIHttpClient_SetNoTLSVerify_Call{Call: _e.mock.On("SetNoTLSVerify")}
}

func (_c *MockIHttpClient_SetNoTLSVerify_Call) Run(run func()) *MockIHttpClient_SetNoTLSVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIHttpClient_SetNoTLSVerify_Call) Return() *MockIHttpClient_SetNoTLSVerify_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHttpClient_SetNoTLSVerify_Call) RunAndReturn(run func()) *MockIHttpClient_SetNoTLSVerify_Call {
	_c.Call.Return(run)
	return _c
}

// SetTimeout provides a mock function with given fields: timeout
func (_m *MockIHttpClient) SetTimeout(timeout time.Duration) {
	_m.Called(timeout)
}

// MockIHttpClient_SetTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimeout'
type MockIHttpClient_SetTimeout_Call struct {
	*mock.Call
}

// SetTimeout is a helper method to define mock.On call
//   - timeout time.Duration
func (_e *MockIHttpClient_Expecter) SetTimeout(timeout interface{}) *MockIHttpClient_SetTimeout_Call {
	return &MockIHttpClient_SetTimeout_Call{Call: _e.mock.On("SetTimeout", timeout)}
}

func (_c *MockIHttpClient_SetTimeout_Call) Run(run func(timeout time.Duration)) *MockIHttpClient_SetTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockIHttpClient_SetTimeout_Call) Return() *MockIHttpClient_SetTimeout_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHttpClient_SetTimeout_Call) RunAndReturn(run func(time.Duration)) *MockIHttpClient_SetTimeout_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockIHttpClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIHttpClient creates a new instance of MockIHttpClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIHttpClient(t mockConstructorTestingTNewMockIHttpClient) *MockIHttpClient {
	mock := &MockIHttpClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
