// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	internal "github.com/nicjohnson145/poke/internal"
	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

type Parser_Expecter struct {
	mock *mock.Mock
}

func (_m *Parser) EXPECT() *Parser_Expecter {
	return &Parser_Expecter{mock: &_m.Mock}
}

// ParseSequences provides a mock function with given fields:
func (_m *Parser) ParseSequences() (map[string]internal.Sequence, error) {
	ret := _m.Called()

	var r0 map[string]internal.Sequence
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]internal.Sequence, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]internal.Sequence); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]internal.Sequence)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Parser_ParseSequences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseSequences'
type Parser_ParseSequences_Call struct {
	*mock.Call
}

// ParseSequences is a helper method to define mock.On call
func (_e *Parser_Expecter) ParseSequences() *Parser_ParseSequences_Call {
	return &Parser_ParseSequences_Call{Call: _e.mock.On("ParseSequences")}
}

func (_c *Parser_ParseSequences_Call) Run(run func()) *Parser_ParseSequences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Parser_ParseSequences_Call) Return(_a0 map[string]internal.Sequence, _a1 error) *Parser_ParseSequences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Parser_ParseSequences_Call) RunAndReturn(run func() (map[string]internal.Sequence, error)) *Parser_ParseSequences_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewParser interface {
	mock.TestingT
	Cleanup(func())
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewParser(t mockConstructorTestingTNewParser) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
