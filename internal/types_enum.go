// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package internal

import (
	"fmt"
	"strings"
)

const (
	// RequestTypeHttp is a RequestType of type http.
	RequestTypeHttp RequestType = "http"
	// RequestTypeGrpc is a RequestType of type grpc.
	RequestTypeGrpc RequestType = "grpc"
)

var ErrInvalidRequestType = fmt.Errorf("not a valid RequestType, try [%s]", strings.Join(_RequestTypeNames, ", "))

var _RequestTypeNames = []string{
	string(RequestTypeHttp),
	string(RequestTypeGrpc),
}

// RequestTypeNames returns a list of possible string values of RequestType.
func RequestTypeNames() []string {
	tmp := make([]string, len(_RequestTypeNames))
	copy(tmp, _RequestTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x RequestType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x RequestType) IsValid() bool {
	_, err := ParseRequestType(string(x))
	return err == nil
}

var _RequestTypeValue = map[string]RequestType{
	"http": RequestTypeHttp,
	"grpc": RequestTypeGrpc,
}

// ParseRequestType attempts to convert a string to a RequestType.
func ParseRequestType(name string) (RequestType, error) {
	if x, ok := _RequestTypeValue[name]; ok {
		return x, nil
	}
	return RequestType(""), fmt.Errorf("%s is %w", name, ErrInvalidRequestType)
}

// MarshalText implements the text marshaller method.
func (x RequestType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RequestType) UnmarshalText(text []byte) error {
	tmp, err := ParseRequestType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
